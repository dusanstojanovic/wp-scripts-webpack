@use "sass:math";
@use "sass:map";

/*---------------------------------------
    Breakpoints Mixin
    usage: @include bp(bp320)  {...}
---------------------------------------*/
$breakpoints: (
	"bp320": 320px,
	"bp375": 375px,
	"bp480": 480px,
	"bp768": 768px,
	"bp1024": 1024px,
	"bp1280": 1280px,
	"bp1366": 1366px,
	"bp1600": 1600px,
	"bp1920": 1920px,
);
@mixin bp($breakpoint) {
	$value: map-get($breakpoints, $breakpoint); //  see _settings.vars.scss
	@if $value != null {
		@media (min-width: $value) {
			@content;
		}
	} @else {
		@warn "Unfortunately, no value could be retrieved from '#{$breakpoint}'. "
        + "Please make sure it is defined in '$breakpoints' map.";
	}
}

/*---------------------------------------
    Fluid values
	usage: @include fluid-value(margin, 64, 128, 480, 1500);
---------------------------------------*/
@mixin fluid-value($rule, $min-value, $max-value, $screen-min, $screen-max) {
	#{$rule}: #{$min-value}px;
	@media only screen and (min-width: #{$screen-min}px) {
		#{$rule}: calc(#{$min-value}px + #{($max-value - $min-value)} * (100vw - #{$screen-min}px) / (#{$screen-max} - #{$screen-min}));
	}
	@media only screen and (min-width: #{$screen-max}px) {
		#{$rule}: #{$max-value}px;
	}
}

/*
Returns a CSS clamp function which resolves to $size-at-min-width when page width is
below $min-width,
$size-at-max-width when page width is above $max-width,
and linearly scales between the two between $min-width and $max-width
usage:
margin: clamp-calc(480px, 1024px, 240px, 520px);
*/
/*---------------------------------------
	Clamped values
---------------------------------------*/
@function clamp-calc($min-width, $max-width, $size-at-min-width, $size-at-max-width) {
	$slope: calc(($size-at-max-width - $size-at-min-width) / ($max-width - $min-width));
	$y-axis-intersection: -1 * $min-width * $slope + $size-at-min-width;
	$return-value: clamp(#{$size-at-min-width}, #{$y-axis-intersection} + #{$slope} * 100vw, #{$size-at-max-width});
	@return $return-value;
}

/*---------------------------------------
	Clamped values
	font-size: #{fluid(16px, 31px, 320px, 960px)};
---------------------------------------*/
$default-min-bp: 480px;
$default-max-bp: 1920px;
@function round($number, $decimals: 0) {
	$n: 1;
	@if $decimals > 0 {
		@for $i from 1 through $decimals {
			$n: $n * 10;
		}
	}
	@return math.div(math.round($number * $n), $n);
}
@function px-to-rem($px) {
	$rems: math.div($px, 16px) * 1rem;
	@return $rems;
}
@function fluid($min-size, $max-size, $min-breakpoint: $default-min-bp, $max-breakpoint: $default-max-bp, $unit: vw) {
	$slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
	$slope-to-unit: round($slope * 100, 2);
	$intercept-rem: round(px-to-rem($min-size - $slope * $min-breakpoint), 2);
	$min-size-rem: round(px-to-rem($min-size), 2);
	$max-size-rem: round(px-to-rem($max-size), 2);
	@return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}
@function getUnit($value) {
	@return str-slice($value * 0 + "", 2, -1);
}

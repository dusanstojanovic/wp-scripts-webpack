@use "sass:string";
@use "sass:math";
@use "sass:map";

/*---------------------------------------
	Set Base Font Size
---------------------------------------*/
$base-font-size: 16px;

/*---------------------------------------
    Breakpoints Mixin
    usage: @include mixins.bp(bp320)  {...}
---------------------------------------*/
$breakpoints: (
	"bp320": 320px,
	"bp360": 360px,
	"bp576": 576px,
	"bp768": 768px,
	"bp1024": 1024px,
	"bp1200": 1200px,
	"bp1440": 1440px,
	"bp1920": 1920px,
);
@function px-to-em($px) {
	$ems: math.div($px, $base-font-size) * 1em;
	@return $ems;
}
@mixin bp($breakpoint) {
	$value: map.get($breakpoints, $breakpoint); //  see _settings.vars.scss
	@if $value {
		@media (min-width: px-to-em($value)) {
			@content;
		}
	} @else {
		@warn "Unfortunately, no value could be retrieved from '#{$breakpoint}'. " + "Please make sure it is defined in '$breakpoints' map.";
	}
}

/*---------------------------------------
	Returns a CSS clamp function which resolves to $size-at-min-width
	when page width is below $min-width,
	$size-at-max-width when page width is above $max-width,
	and linearly scales between the two between $min-width and $max-width
	usage:
	font-size: mixins.clamp-calc(16px, 32px);  // uses default breakpoints
	font-size: mixins.clamp-calc(16px, 32px, 320px, 1280px);  // custom breakpoints
---------------------------------------*/
$default-min-width: 375px;
$default-max-width: 1280px;

@function clamp-calc($size-at-min-width, $size-at-max-width, $min-width: $default-min-width, $max-width: $default-max-width) {
	$slope: calc(($size-at-max-width - $size-at-min-width) / ($max-width - $min-width));
	$y-axis-intersection: -1 * $min-width * $slope + $size-at-min-width;
	$return-value: clamp(#{$size-at-min-width}, #{$y-axis-intersection} + #{$slope} * 100vw, #{$size-at-max-width});
	@return $return-value;
}

/*---------------------------------------
	Clamped values
	font-size: mixins.fluid(16px, 32px); // uses default breakpoints
	font-size: mixins.fluid(16px, 32px, 320px, 960px);  // custom breakpoints
---------------------------------------*/
$default-min-bp: 375px;
$default-max-bp: 1280px;
// Function to round a number to the specified number of decimal places
@function roundify($number, $decimals: 0) {
	$n: 1;
	@if $decimals > 0 {
		@for $i from 1 through $decimals {
			$n: $n * 10;
		}
	}
	@return math.div(math.round($number * $n), $n);
}
// Convert px to rem
@function px-to-rem($px) {
	$rems: math.div($px, $base-font-size) * 1rem;
	@return $rems;
}
// Main fluid size function, renamed to fluid for clarity
@function fluid($min-size, $max-size, $min-breakpoint: $default-min-bp, $max-breakpoint: $default-max-bp, $unit: vw) {
	// Calculate slope and intercept
	$slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
	$slope-to-unit: roundify($slope * 100, 2);
	$intercept-rem: roundify(px-to-rem($min-size - $slope * $min-breakpoint), 2);
	// Convert min and max sizes to rems
	$min-size-rem: roundify(px-to-rem($min-size), 2);
	$max-size-rem: roundify(px-to-rem($max-size), 2);
	// Return a clamp() function for fluid scaling
	@return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}
